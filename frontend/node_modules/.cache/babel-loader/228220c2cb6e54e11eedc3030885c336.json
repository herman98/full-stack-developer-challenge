{"ast":null,"code":"var _jsxFileName = \"/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/Variant/Form.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Button } from \"antd\";\nimport { AutoComplete } from \"antd\";\nimport { getProduct, getProductById } from \"../../API-services/product\";\nimport { postVariant, getVariantById, updateVariant } from \"../../API-services/variant\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\nconst layout = {\n  labelCol: {\n    span: 2\n  },\n  wrapperCol: {\n    span: 8\n  }\n};\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst validateMessages = {\n  required: \"${label} is required!\"\n};\n\nconst VariantForm = props => {\n  let isMounted = true;\n  let variantId = props.match.params.variantId;\n  let [autoCompleteOption, setAutoCompleteOption] = useState([]);\n  let [productId, setProductId] = useState(\"\");\n  let [product, setProduct] = useState(\"\");\n  let [name, setName] = useState(\"\");\n  let [size, setSize] = useState(\"\");\n  let [color, setColor] = useState(\"\");\n  let [loading, setLoading] = useState(false); // const { register, handleSubmit, reset } = useForm();\n\n  const [form] = Form.useForm(); // let [description, setDescription] = useState('')\n\n  const onSelect = (value, optionObject) => {\n    setProductId(optionObject.id);\n  };\n\n  const onNameChange = e => {\n    setName(e.target.value);\n  };\n\n  const onSizeChange = e => {\n    setSize(e.target.value);\n  };\n\n  const onColorChange = e => {\n    setColor(e.target.value);\n  };\n\n  const onSubmit = async () => {\n    if (isMounted) {\n      setLoading(true);\n    }\n\n    const payload = {\n      name,\n      size,\n      color,\n      product_id: productId\n    };\n\n    try {\n      let response = {};\n\n      if (variantId) {\n        response = await updateVariant(productId, payload);\n      } else {\n        response = await postVariant(payload);\n      }\n\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n\n    if (isMounted) {\n      setLoading(false);\n    }\n  };\n\n  const fetchProducts = async () => {\n    try {\n      let response = await getProduct(1, 100);\n      let result = [];\n\n      if (response.status === 200) {\n        result = response.data.data.products.map(product => ({\n          id: product.id,\n          value: product.name\n        }));\n\n        if (isMounted) {\n          setAutoCompleteOption(result);\n        }\n      } else {\n        console.error(\"fail to fetch products\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchProductbyID = async productId => {\n    try {\n      let response = await getProductById(productId);\n      let productData = response.data.data.product;\n      setProduct(productData.name);\n      form.setFieldsValue({\n        Product: productData.name\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchVariant = async variantId => {\n    try {\n      let response = await getVariantById(variantId);\n      fetchProductbyID(response.data.data.variant.product_id);\n      let variantData = response.data.data.variant;\n\n      if (variantId && isMounted) {\n        setName(variantData.name);\n        setSize(variantData.size);\n        setProductId(variantData.product_id);\n        setColor(variantData.color);\n        form.setFieldsValue({\n          Name: variantData.name,\n          Size: variantData.size,\n          Color: variantData.color\n        });\n      } else {}\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchProducts();\n\n    if (variantId) {\n      fetchVariant(variantId);\n    }\n\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, \"Variant Form\"), /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n    form: form,\n    name: \"nest-messages\",\n    validateMessages: validateMessages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Product\",\n    label: \"Product\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    style: {\n      width: 200\n    },\n    options: autoCompleteOption,\n    onSelect: onSelect,\n    placeholder: \"Insert product name\",\n    filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Name\",\n    label: \"Name\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: name,\n    onChange: onNameChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Size\",\n    label: \"Size\",\n    rules: [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: size,\n    onChange: onSizeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Color\",\n    label: \"Color\",\n    rules: [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: color,\n    onChange: onColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    wrapperCol: { ...layout.wrapperCol,\n      offset: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    loading: loading,\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default VariantForm;","map":{"version":3,"sources":["/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/Variant/Form.jsx"],"names":["React","useState","useEffect","Form","Input","Button","AutoComplete","getProduct","getProductById","postVariant","getVariantById","updateVariant","successModal","errorModal","layout","labelCol","span","wrapperCol","formItemLayout","xs","sm","validateMessages","required","VariantForm","props","isMounted","variantId","match","params","autoCompleteOption","setAutoCompleteOption","productId","setProductId","product","setProduct","name","setName","size","setSize","color","setColor","loading","setLoading","form","useForm","onSelect","value","optionObject","id","onNameChange","e","target","onSizeChange","onColorChange","onSubmit","payload","product_id","response","status","error","console","fetchProducts","result","data","products","map","log","fetchProductbyID","productData","setFieldsValue","Product","fetchVariant","variant","variantData","Name","Size","Color","cleanup","width","inputValue","option","toUpperCase","indexOf","offset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Button } from \"antd\";\nimport { AutoComplete } from \"antd\";\nimport { \n  getProduct, \n  getProductById \n} from \"../../API-services/product\";\nimport {\n  postVariant,\n  getVariantById,\n  updateVariant,\n} from \"../../API-services/variant\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\n\nconst layout = {\n  labelCol: {\n    span: 2,\n  },\n  wrapperCol: {\n    span: 8,\n  },\n};\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n};\n\nconst VariantForm = (props) => {\n  let isMounted = true;\n  let variantId = props.match.params.variantId;\n  let [autoCompleteOption, setAutoCompleteOption] = useState([]);\n  let [productId, setProductId] = useState(\"\");\n  let [product, setProduct] = useState(\"\");\n  let [name, setName] = useState(\"\");\n  let [size, setSize] = useState(\"\");\n  let [color, setColor] = useState(\"\");\n  let [loading, setLoading] = useState(false);\n  // const { register, handleSubmit, reset } = useForm();\n\n  const [form] = Form.useForm();\n  // let [description, setDescription] = useState('')\n\n  const onSelect = (value, optionObject) => {\n    setProductId(optionObject.id);\n  };\n\n  const onNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const onSizeChange = (e) => {\n    setSize(e.target.value);\n  };\n\n  const onColorChange = (e) => {\n    setColor(e.target.value);\n  };\n\n  const onSubmit = async () => {\n    if (isMounted) {\n      setLoading(true);\n    }\n\n    const payload = {\n      name,\n      size,\n      color,\n      product_id: productId,\n    };\n    try {\n      let response = {};\n\n      if (variantId) {\n        response = await updateVariant(productId, payload);\n      } else {\n        response = await postVariant(payload);\n      }\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n    if (isMounted) {\n      setLoading(false);\n    }\n    \n  };\n\n  const fetchProducts = async () => {\n    try {\n      let response = await getProduct(1, 100);\n      let result = [];\n      if (response.status === 200) {\n        result = response.data.data.products.map((product) => ({\n          id: product.id,\n          value: product.name,\n        }));\n        if (isMounted) {\n          setAutoCompleteOption(result);\n        }\n\n      } else {\n        console.error(\"fail to fetch products\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchProductbyID = async (productId) => {\n    try {\n      let response = await getProductById(productId);\n      let productData = response.data.data.product;\n      setProduct(productData.name);\n      form.setFieldsValue({\n        Product: productData.name\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchVariant = async (variantId) => {\n    try {\n      let response = await getVariantById(variantId);\n      fetchProductbyID(response.data.data.variant.product_id)\n\n      let variantData = response.data.data.variant;\n      if (variantId && isMounted) {\n        setName(variantData.name);\n        setSize(variantData.size);\n        setProductId(variantData.product_id);\n        setColor(variantData.color);\n\n        form.setFieldsValue({\n          Name: variantData.name,\n          Size: variantData.size,\n          Color: variantData.color,\n        });\n      } else {\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchProducts();\n    if (variantId) {\n      fetchVariant(variantId);\n    }\n\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <>\n      <h1>Variant Form</h1>\n\n      <Form\n        {...formItemLayout}\n        form={form}\n        name=\"nest-messages\"\n        validateMessages={validateMessages}\n      >\n        <Form.Item\n          name=\"Product\"\n          label=\"Product\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AutoComplete\n            style={{\n              width: 200,\n            }}\n            options={autoCompleteOption}\n            onSelect={onSelect}\n            placeholder=\"Insert product name\"\n            filterOption={(inputValue, option) =>\n              option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !==\n              -1\n            }\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"Name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input value={name} onChange={onNameChange} />\n        </Form.Item>\n        <Form.Item\n          name=\"Size\"\n          label=\"Size\"\n          rules={[]}\n        >\n          <Input value={size} onChange={onSizeChange} />\n        </Form.Item>\n        <Form.Item\n          name=\"Color\"\n          label=\"Color\"\n          rules={[\n            ]}\n        >\n          <Input value={color} onChange={onColorChange} />\n        </Form.Item>\n       \n        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n          <Button type=\"primary\" loading={loading} onClick={onSubmit}>\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default VariantForm;\n"]},"metadata":{},"sourceType":"module"}