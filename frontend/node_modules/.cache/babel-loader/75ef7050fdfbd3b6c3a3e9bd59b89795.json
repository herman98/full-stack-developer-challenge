{"ast":null,"code":"var _jsxFileName = \"/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/Variant/LinkImageForm.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Form, Button, AutoComplete } from \"antd\";\nimport { PlusOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport { getVariant } from \"../../API-services/variant\";\nimport { getImage } from \"../../API-services/images\";\nimport { attachImageToVariant } from \"../../API-services/imageAttachent\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\nconst validateMessages = {\n  required: \"${label} is required!\"\n};\n\nconst ImageLogoForm = () => {\n  let isMounted = true;\n  let [variantOption, setVariantOption] = useState([]);\n  let [imageOption, setImageOption] = useState([]);\n  let [variantId, setVariantId] = useState(\"\");\n  let [loading, setLoading] = useState(false);\n  let [images, setImages] = useState([{\n    value: \"\",\n    id: \"-1\"\n  }]);\n\n  const onSelect = (value, optionObject) => {\n    setVariantId(optionObject.id);\n  };\n\n  const insertValue = (value, optionObject, index) => {\n    let newArray = [...images];\n    newArray[index][\"id\"] = optionObject.id;\n    newArray[index][\"value\"] = value;\n    setImages(newArray);\n  };\n\n  const addInput = () => {\n    let newArray = [...images];\n    newArray.push({\n      value: \"\",\n      id: \"-1\"\n    });\n    setImages(newArray);\n  };\n\n  const removeInput = index => {\n    let newArray = [...images];\n    newArray.splice(index, 1);\n    setImages(newArray);\n  };\n\n  const onSubmit = async () => {\n    setLoading(true);\n    const payload = images.map(image => ({\n      image_id: image.id\n    }));\n\n    try {\n      let response = await attachImageToVariant(variantId, payload);\n\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n\n    setLoading(false);\n  };\n\n  setTimeout(() => {\n    setLoading(false);\n  }, 2000);\n\n  const fetchVariants = async () => {\n    try {\n      let response = await getVariant(1, 1000);\n      let result = [];\n\n      if (response.status === 200) {\n        result = response.data.data.variants.map(variant => ({\n          id: variant.id,\n          value: variant.name\n        }));\n\n        if (isMounted) {\n          setVariantOption(result);\n        }\n      } else {\n        console.error(\"fail to fetch variants\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchImage = async (page, perPage) => {\n    try {\n      let response = await getImage(page, perPage);\n      let result = [];\n\n      if (response.status === 200) {\n        result = response.data.data.images.map(image => ({\n          id: image.id,\n          value: image.url\n        }));\n        setImageOption(result);\n      } else {\n        console.error(\"fail to fetch images\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchVariants();\n    fetchImage(1, 1000);\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Image Form\"), /*#__PURE__*/React.createElement(Form, {\n    labelCol: {\n      span: 2\n    },\n    wrapperCol: {\n      span: 16\n    },\n    name: \"nest-messages\",\n    validateMessages: validateMessages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: [\"user\", \"variant\"],\n    label: \"Variant\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    style: {\n      width: 200\n    },\n    options: variantOption,\n    onSelect: onSelect,\n    placeholder: \"Insert variant name\",\n    filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  })), images.map((image, index) => {\n    return /*#__PURE__*/React.createElement(Form.Item, {\n      key: index,\n      label: \"Image Url\",\n      rules: [{\n        required: true\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      style: {\n        display: \"inline-block\",\n        width: \"calc(50% - 8px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(AutoComplete, {\n      options: imageOption,\n      onSelect: (value, option) => insertValue(value, option, index),\n      placeholder: \"Image name\",\n      value: image.value,\n      filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      style: {\n        display: \"inline-block\",\n        marginLeft: 16\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        display: \"inline-block\",\n        marginLeft: 16\n      },\n      type: \"primary\",\n      onClick: () => removeInput(index),\n      danger: true,\n      disabled: index === 0 && images.length == 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CloseOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }\n    })), index === images.length - 1 && /*#__PURE__*/React.createElement(Button, {\n      style: {\n        display: \"inline-block\",\n        marginLeft: 16\n      },\n      type: \"primary\",\n      onClick: addInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }\n    }))));\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    loading: loading,\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nexport default ImageLogoForm;","map":{"version":3,"sources":["/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/Variant/LinkImageForm.jsx"],"names":["React","useState","useEffect","Form","Button","AutoComplete","PlusOutlined","CloseOutlined","getVariant","getImage","attachImageToVariant","successModal","errorModal","validateMessages","required","ImageLogoForm","isMounted","variantOption","setVariantOption","imageOption","setImageOption","variantId","setVariantId","loading","setLoading","images","setImages","value","id","onSelect","optionObject","insertValue","index","newArray","addInput","push","removeInput","splice","onSubmit","payload","map","image","image_id","response","status","error","console","setTimeout","fetchVariants","result","data","variants","variant","name","log","fetchImage","page","perPage","url","cleanup","span","width","inputValue","option","toUpperCase","indexOf","display","marginLeft","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Form, Button, AutoComplete } from \"antd\";\nimport { PlusOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport { getVariant } from \"../../API-services/variant\";\nimport { getImage } from \"../../API-services/images\";\nimport { attachImageToVariant } from \"../../API-services/imageAttachent\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n};\n\nconst ImageLogoForm = () => {\n  let isMounted = true\n  let [variantOption, setVariantOption] = useState([]);\n  let [imageOption, setImageOption] = useState([]);\n  let [variantId, setVariantId] = useState(\"\");\n  let [loading, setLoading] = useState(false);\n  let [images, setImages] = useState([\n    {\n      value: \"\",\n      id: \"-1\",\n    },\n  ]);\n\n  const onSelect = (value, optionObject) => {\n    setVariantId(optionObject.id);\n  };\n\n  const insertValue = (value, optionObject, index) => {\n    let newArray = [...images];\n    newArray[index][\"id\"] = optionObject.id;\n    newArray[index][\"value\"] = value;\n    setImages(newArray);\n  };\n\n  const addInput = () => {\n    let newArray = [...images];\n    newArray.push({\n      value: \"\",\n      id: \"-1\",\n    });\n    setImages(newArray);\n  };\n\n  const removeInput = (index) => {\n    let newArray = [...images];\n    newArray.splice(index, 1);\n    setImages(newArray);\n  };\n\n  const onSubmit = async () => {\n    setLoading(true);\n\n    const payload = images.map((image) => ({\n      image_id: image.id,\n    }));\n    try {\n      let response = await attachImageToVariant(variantId, payload)\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n\n    setLoading(false);\n  };\n\n  setTimeout(() => {\n    setLoading(false);\n  }, 2000);\n\n  const fetchVariants = async () => {\n    try {\n      let response = await getVariant(1, 1000);\n      let result = [];\n      if (response.status === 200) {\n        result = response.data.data.variants.map((variant) => ({\n          id: variant.id,\n          value: variant.name,\n        }));\n        if (isMounted) {\n          setVariantOption(result);\n        }\n      } else {\n        console.error(\"fail to fetch variants\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchImage = async (page, perPage) => {\n    try {\n      let response = await getImage(page, perPage);\n      let result = [];\n      if (response.status === 200) {\n        result = response.data.data.images.map((image) => ({\n          id: image.id,\n          value: image.url,\n        }));\n        setImageOption(result);\n      } else {\n        console.error(\"fail to fetch images\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchVariants();\n    fetchImage(1, 1000);\n\n    return function cleanup() {\n      isMounted = false\n    }\n  }, []);\n\n  return (\n    <>\n      <h1>Image Form</h1>\n      <Form\n        labelCol={{ span: 2 }}\n        wrapperCol={{ span: 16 }}\n        name=\"nest-messages\"\n        validateMessages={validateMessages}\n      >\n        <Form.Item\n          name={[\"user\", \"variant\"]}\n          label=\"Variant\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AutoComplete\n            style={{\n              width: 200,\n            }}\n            options={variantOption}\n            onSelect={onSelect}\n            placeholder=\"Insert variant name\"\n            filterOption={(inputValue, option) =>\n              option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !==\n              -1\n            }\n          />\n        </Form.Item>\n\n        {images.map((image, index) => {\n          return (\n            <Form.Item\n              key={index}\n              label=\"Image Url\"\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n            >\n              <Form.Item\n                style={{\n                  display: \"inline-block\",\n                  width: \"calc(50% - 8px)\",\n                }}\n              >\n                <AutoComplete\n                  options={imageOption}\n                  onSelect={(value, option) =>\n                    insertValue(value, option, index)\n                  }\n                  placeholder=\"Image name\"\n                  value={image.value}\n                  filterOption={(inputValue, option) =>\n                    option.value\n                      .toUpperCase()\n                      .indexOf(inputValue.toUpperCase()) !== -1\n                  }\n                />\n              </Form.Item>\n              <Form.Item style={{ display: \"inline-block\", marginLeft: 16 }}>\n                <Button\n                  style={{ display: \"inline-block\", marginLeft: 16 }}\n                  type=\"primary\"\n                  onClick={() => removeInput(index)}\n                  danger\n                  disabled={index === 0 && images.length == 1}\n                >\n                  <CloseOutlined />\n                </Button>\n                {index === images.length - 1 && (\n                  <Button\n                    style={{ display: \"inline-block\", marginLeft: 16 }}\n                    type=\"primary\"\n                    onClick={addInput}\n                  >\n                    <PlusOutlined />\n                  </Button>\n                )}\n              </Form.Item>\n            </Form.Item>\n          );\n        })}\n        <Button type=\"primary\" loading={loading} onClick={onSubmit}>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default ImageLogoForm;\n"]},"metadata":{},"sourceType":"module"}