{"ast":null,"code":"var _jsxFileName = \"/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/ImageLogo/Form.jsx\";\nimport React, { useState, useEffect } from \"react\"; //, cancelCourse\n\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Button } from \"antd\";\nimport { postImage, getImageById, updateImage } from \"../../API-services/images\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\nconst layout = {\n  labelCol: {\n    span: 2\n  },\n  wrapperCol: {\n    span: 8\n  }\n};\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst validateMessages = {\n  required: \"${label} is required!\"\n};\n\nconst ImageLogoForm = props => {\n  let isMounted = true;\n  let imageId = props.match.params.imageId;\n  let [loading, setLoading] = useState(false);\n  let [imageUrl, setImageUrl] = useState(\"\");\n  const [form] = Form.useForm();\n\n  const imageInputChange = e => {\n    if (isMounted) {\n      setImageUrl(e.target.value);\n    }\n  };\n\n  const onSubmit = async () => {\n    if (isMounted) {\n      setLoading(true);\n    }\n\n    const payload = {\n      url: imageUrl\n    };\n\n    try {\n      let response = {};\n\n      if (imageId) {\n        response = await updateImage(imageId, payload);\n      } else {\n        response = await postImage(payload);\n      }\n\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n\n    if (isMounted) {\n      setLoading(false);\n    }\n  };\n\n  const fetchImage = async imageId => {\n    try {\n      let response = await getImageById(imageId);\n      let imageData = response.data.data.image;\n\n      if (imageId && isMounted) {\n        setImageUrl(imageData.url);\n        form.setFieldsValue({\n          ImageUrl: imageData.url\n        });\n      } else {}\n    } catch (error) {\n      console.error(error);\n    }\n  }; // cancelCourse(() => () => { \n  //   form.reset();\n  // })\n\n\n  useEffect(() => {\n    console.log(\"useEffect imageId :\" + imageId);\n\n    if (imageId) {\n      fetchImage(imageId);\n    }\n\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Image Form\"), /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n    form: form,\n    name: \"nest-messages\",\n    validateMessages: validateMessages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"ImageUrl\",\n    label: \"Image Url\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: imageUrl,\n    onChange: imageInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    wrapperCol: { ...formItemLayout.wrapperCol,\n      offset: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    loading: loading,\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default ImageLogoForm;","map":{"version":3,"sources":["/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/ImageLogo/Form.jsx"],"names":["React","useState","useEffect","Form","Input","Button","postImage","getImageById","updateImage","successModal","errorModal","layout","labelCol","span","wrapperCol","formItemLayout","xs","sm","validateMessages","required","ImageLogoForm","props","isMounted","imageId","match","params","loading","setLoading","imageUrl","setImageUrl","form","useForm","imageInputChange","e","target","value","onSubmit","payload","url","response","status","error","console","fetchImage","imageData","data","image","setFieldsValue","ImageUrl","log","cleanup","offset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"; //, cancelCourse\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Button } from \"antd\";\nimport {\n  postImage,\n  getImageById,\n  updateImage,\n} from \"../../API-services/images\";\n\nimport { successModal, errorModal } from \"../../utilities/modal\";\n\nconst layout = {\n  labelCol: {\n    span: 2,\n  },\n  wrapperCol: {\n    span: 8,\n  },\n};\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n};\n\nconst ImageLogoForm = (props) => {\n  let isMounted = true\n  let imageId = props.match.params.imageId;\n  let [loading, setLoading] = useState(false);\n  let [imageUrl, setImageUrl] = useState(\"\");\n  const [form] = Form.useForm();\n\n  const imageInputChange = (e) => {\n    if (isMounted) {\n      setImageUrl(e.target.value);\n    }\n  };\n\n  const onSubmit = async () => {\n    if (isMounted) {\n      setLoading(true);\n    }\n\n    const payload = {\n      url: imageUrl,\n    };\n\n    try {\n      let response = {};\n      if (imageId) {\n        response = await updateImage(imageId, payload);\n      } else {\n        response = await postImage(payload);\n      }\n\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n    if (isMounted) {\n      setLoading(false);\n    }\n  };\n\n  const fetchImage = async (imageId) => {\n    try {\n      let response = await getImageById(imageId);\n      let imageData = response.data.data.image;\n      if (imageId && isMounted) {\n        setImageUrl(imageData.url);\n      \n        form.setFieldsValue({\n          ImageUrl: imageData.url,\n        });\n      } else {\n        \n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // cancelCourse(() => () => { \n  //   form.reset();\n  // })\n\n  useEffect(() => {\n    console.log(\"useEffect imageId :\" + imageId)\n    \n    if (imageId) {\n      fetchImage(imageId);\n    } \n\n    return function cleanup() {\n      isMounted = false\n    }\n  }, [])\n\n  \n  return (\n    <>\n      <h1>Image Form</h1>\n      <Form\n        {...formItemLayout}\n        form={form}\n        name=\"nest-messages\"\n        validateMessages={validateMessages}\n      >\n        <Form.Item\n          name=\"ImageUrl\"\n          label=\"Image Url\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input value={imageUrl} onChange={imageInputChange}/>\n        </Form.Item>\n\n        <Form.Item wrapperCol={{ ...formItemLayout.wrapperCol, offset: 8 }}>\n          <Button type=\"primary\" loading={loading} onClick={onSubmit}>\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default ImageLogoForm;\n"]},"metadata":{},"sourceType":"module"}