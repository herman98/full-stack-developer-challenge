{"ast":null,"code":"var _jsxFileName = \"/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/Product/Form.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Button, AutoComplete } from \"antd\";\nimport { getImage } from \"../../API-services/images\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\nimport { getProductById, postProduct, updateProduct } from \"../../API-services/product\";\nconst layout = {\n  labelCol: {\n    span: 2\n  },\n  wrapperCol: {\n    span: 8\n  }\n};\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst validateMessages = {\n  required: \"${label} is required!\"\n};\n\nconst ProductForm = props => {\n  let isMounted = true;\n  let productId = props.match.params.productId;\n  let [autoCompleteOption, setAutoCompleteOption] = useState([]);\n  let [loading, setLoading] = useState(false);\n  let [productName, setProductName] = useState(\"\");\n  let [imageId, setImageId] = useState(\"\");\n  let [description, setDescription] = useState(\"\");\n  const [form] = Form.useForm();\n\n  const onSubmit = async () => {\n    setLoading(true);\n    const payload = {\n      name: productName,\n      logo_id: imageId,\n      description\n    };\n\n    try {\n      let response = {};\n\n      if (productId) {\n        response = await updateProduct(productId, payload);\n      } else {\n        response = await postProduct(payload);\n      }\n\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n\n    setLoading(false);\n  };\n\n  const fetchProduct = async productId => {\n    try {\n      let response = await getProductById(productId);\n      let productData = response.data.data.product;\n\n      if (isMounted && isMounted) {\n        setProductName(productData.name);\n        setImageId(productData.logo_id);\n        setDescription(productData.description);\n        form.setFieldsValue({\n          Name: productData.name,\n          ImageUrl: productData.logo.url,\n          Description: productData.description\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchImage = async (page, perPage) => {\n    try {\n      let response = await getImage(page, perPage);\n      let result = [];\n\n      if (response.status === 200) {\n        result = response.data.data.images.map(image => ({\n          id: image.id,\n          value: image.url\n        }));\n\n        if (isMounted) {\n          setAutoCompleteOption(result);\n        }\n      } else {\n        console.error(\"fail to fetch images\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onNameChange = e => {\n    setProductName(e.target.value);\n  };\n\n  const onImageSelect = (value, optionObject) => {\n    setImageId(optionObject.id);\n  };\n\n  const onDescriptionChange = e => {\n    setDescription(e.target.value);\n  };\n\n  useEffect(() => {\n    fetchImage(1, 1000);\n\n    if (productId) {\n      fetchProduct(productId);\n    }\n\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"Product Form\"), /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n    form: form,\n    name: \"nest-messages\",\n    validateMessages: validateMessages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Name\",\n    label: \"Name\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: productName,\n    onChange: onNameChange,\n    placeholder: \"Insert product name here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"ImageUrl\",\n    label: \"Image Url\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    options: autoCompleteOption,\n    onSelect: onImageSelect,\n    placeholder: \"Image name\",\n    filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Description\",\n    label: \"Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input.TextArea, {\n    value: description,\n    onChange: onDescriptionChange,\n    placeholder: \"Insert product description here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    wrapperCol: { ...layout.wrapperCol,\n      offset: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    loading: loading,\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default ProductForm;","map":{"version":3,"sources":["/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/Product/Form.jsx"],"names":["React","useState","useEffect","Form","Input","Button","AutoComplete","getImage","successModal","errorModal","getProductById","postProduct","updateProduct","layout","labelCol","span","wrapperCol","formItemLayout","xs","sm","validateMessages","required","ProductForm","props","isMounted","productId","match","params","autoCompleteOption","setAutoCompleteOption","loading","setLoading","productName","setProductName","imageId","setImageId","description","setDescription","form","useForm","onSubmit","payload","name","logo_id","response","status","error","console","fetchProduct","productData","data","product","setFieldsValue","Name","ImageUrl","logo","url","Description","fetchImage","page","perPage","result","images","map","image","id","value","log","onNameChange","e","target","onImageSelect","optionObject","onDescriptionChange","cleanup","inputValue","option","toUpperCase","indexOf","offset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Button, AutoComplete } from \"antd\";\nimport { getImage } from \"../../API-services/images\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\nimport { getProductById, postProduct, updateProduct } from \"../../API-services/product\";\n\nconst layout = {\n  labelCol: {\n    span: 2,\n  },\n  wrapperCol: {\n    span: 8,\n  },\n};\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n};\n\nconst ProductForm = (props) => {\n  let isMounted = true\n  let productId = props.match.params.productId\n  let [autoCompleteOption, setAutoCompleteOption] = useState([]);\n  let [loading, setLoading] = useState(false);\n  let [productName, setProductName] = useState(\"\");\n  let [imageId, setImageId] = useState(\"\");\n  let [description, setDescription] = useState(\"\");\n  const [form] = Form.useForm();\n  \n  const onSubmit = async () => {\n    setLoading(true);\n\n    const payload = {\n      name: productName,\n      logo_id: imageId,\n      description,\n    };\n\n    try {\n      let response = {}\n\n      if (productId) {\n        response = await updateProduct(productId, payload);\n      } else {\n        response = await postProduct(payload);\n      }\n\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n\n    setLoading(false);\n  };\n\n  const fetchProduct = async (productId) => {\n    try {\n      let response = await getProductById(productId);\n      let productData = response.data.data.product;\n      if (isMounted && isMounted) {\n        setProductName(productData.name)\n        setImageId(productData.logo_id)\n        setDescription(productData.description)\n        form.setFieldsValue({\n          Name: productData.name,\n          ImageUrl: productData.logo.url,\n          Description: productData.description\n        })\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchImage = async (page, perPage) => {\n    try {\n      let response = await getImage(page, perPage);\n      let result = [];\n      if (response.status === 200) {\n        result = response.data.data.images.map((image) => ({\n          id: image.id,\n          value: image.url,\n        }));\n        if(isMounted) {\n          setAutoCompleteOption(result);\n        }\n      } else {\n        console.error(\"fail to fetch images\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onNameChange = (e) => {\n    setProductName(e.target.value);\n  };\n\n  const onImageSelect = (value, optionObject) => {\n    setImageId(optionObject.id);\n  };\n\n  const onDescriptionChange = (e) => {\n    setDescription(e.target.value);\n  };\n\n  useEffect(() => {\n    fetchImage(1, 1000);\n    if (productId) {\n      fetchProduct(productId)\n    }\n\n    return function cleanup() {\n      isMounted = false\n    }\n  }, []);\n\n  return (\n    <>\n      <h1>Product Form</h1>\n      <Form\n        {...formItemLayout}\n        form={form}\n        name=\"nest-messages\"\n        validateMessages={validateMessages}\n      >\n        <Form.Item\n          name={\"Name\"}\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input value={productName} onChange={onNameChange} placeholder={\"Insert product name here\"} />\n        </Form.Item>\n        <Form.Item\n          name={\"ImageUrl\"}\n          label=\"Image Url\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AutoComplete\n            options={autoCompleteOption}\n            onSelect={onImageSelect}\n            placeholder=\"Image name\"\n            filterOption={(inputValue, option) =>\n              option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !==\n              -1\n            }\n          />\n        </Form.Item>\n        <Form.Item name={\"Description\"} label=\"Description\">\n          <Input.TextArea value={description} onChange={onDescriptionChange} placeholder={\"Insert product description here\"}/>\n        </Form.Item>\n        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n          <Button type=\"primary\" loading={loading} onClick={onSubmit}>\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default ProductForm\n"]},"metadata":{},"sourceType":"module"}