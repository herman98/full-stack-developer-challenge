{"ast":null,"code":"var _jsxFileName = \"/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/ImageLogo/List.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { getImage } from \"../../API-services/images\";\nimport { EntityImageLogo as ImageEntity } from \"../../components/Entity\";\nimport { Pagination } from \"antd\";\n\nconst List = () => {\n  let isMounted = true;\n  let [images, setImages] = useState([]);\n  let [paging, setPaging] = useState({});\n\n  const fetchVariants = async (page, perPage) => {\n    try {\n      let response = await getImage(page, perPage);\n      let result = [];\n      let paginationAttribute = {};\n\n      if (response.status === 200) {\n        result = response.data.data.images.map(variant => ({\n          id: variant.id,\n          url_name: variant.url\n        }));\n        paginationAttribute = response.data.data.paging;\n\n        if (isMounted) {\n          setImages(result);\n          setPaging({\n            currentPage: paginationAttribute.current_page,\n            total: paginationAttribute.count\n          });\n        }\n      } else {\n        console.error(\"fail to fetch images logo\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onPaginationChange = (page, pageSize) => {\n    fetchVariants(page, pageSize);\n  };\n\n  useEffect(() => {\n    fetchVariants(1, 10);\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"relative\",\n      paddingBottom: 72\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Images List\"), images.map((images, index) => {\n    return /*#__PURE__*/React.createElement(ImageEntity, {\n      key: index,\n      url_name: images.url_name //   detailUrl={`/image/detail/${variant.id}`}\n      ,\n      editUrl: `/image_logo/${images.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      position: \"absolute\",\n      bottom: 0,\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    defaultCurrent: 1,\n    total: paging.total,\n    current: paging.currentPage,\n    pageSize: 10,\n    onChange: onPaginationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default List;","map":{"version":3,"sources":["/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/ImageLogo/List.jsx"],"names":["React","useState","useEffect","getImage","EntityImageLogo","ImageEntity","Pagination","List","isMounted","images","setImages","paging","setPaging","fetchVariants","page","perPage","response","result","paginationAttribute","status","data","map","variant","id","url_name","url","currentPage","current_page","total","count","console","error","log","onPaginationChange","pageSize","cleanup","position","paddingBottom","index","width","bottom","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getImage } from \"../../API-services/images\";\nimport { EntityImageLogo as ImageEntity }  from \"../../components/Entity\";\nimport { Pagination } from \"antd\";\n\nconst List = () => {\n  let isMounted = true;\n  let [images, setImages] = useState([]);\n  let [paging, setPaging] = useState({});\n\n  const fetchVariants = async (page, perPage) => {\n    try {\n      let response = await getImage(page, perPage);\n      let result = [];\n      let paginationAttribute = {};\n      if (response.status === 200) {\n        result = response.data.data.images.map((variant) => ({\n          id: variant.id,\n          url_name: variant.url,\n        }));\n        paginationAttribute = response.data.data.paging;\n        if (isMounted) {\n            setImages(result);\n          setPaging({\n            currentPage: paginationAttribute.current_page,\n            total: paginationAttribute.count,\n          });\n        }\n      } else {\n        console.error(\"fail to fetch images logo\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onPaginationChange = (page, pageSize) => {\n    fetchVariants(page, pageSize)\n  }\n\n  useEffect(() => {\n    fetchVariants(1, 10);\n\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <div style={{ position: \"relative\", paddingBottom: 72 }}>\n      <div>\n        <h1>Images List</h1>\n        {images.map((images, index) => {\n          return (\n            <ImageEntity\n              key={index}\n              url_name={images.url_name}\n            //   detailUrl={`/image/detail/${variant.id}`}\n              editUrl={`/image_logo/${images.id}`}\n            />\n          );\n        })}\n      </div>\n      <div\n        style={{\n          width: \"100%\",\n          position: \"absolute\",\n          bottom: 0,\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Pagination\n          defaultCurrent={1}\n          total={paging.total}\n          current={paging.currentPage}\n          pageSize={10}\n          onChange={onPaginationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default List;"]},"metadata":{},"sourceType":"module"}