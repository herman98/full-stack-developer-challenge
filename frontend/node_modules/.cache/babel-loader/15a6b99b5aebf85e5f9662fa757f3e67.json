{"ast":null,"code":"var _jsxFileName = \"/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/Variant/Form.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Button } from \"antd\";\nimport { AutoComplete } from \"antd\";\nimport { getProduct, getProductById } from \"../../API-services/product\";\nimport { postVariant, getVariantById, updateVariant } from \"../../API-services/variant\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\nconst layout = {\n  labelCol: {\n    span: 2\n  },\n  wrapperCol: {\n    span: 8\n  }\n};\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst validateMessages = {\n  required: \"${label} is required!\"\n};\n\nconst VariantForm = props => {\n  let isMounted = true;\n  let variantId = props.match.params.variantId;\n  let [autoCompleteOption, setAutoCompleteOption] = useState([]);\n  let [productId, setProductId] = useState(\"\");\n  let [product, setProduct] = useState(\"\");\n  let [name, setName] = useState(\"\");\n  let [size, setSize] = useState(\"\");\n  let [color, setColor] = useState(\"\");\n  let [loading, setLoading] = useState(false); // const { register, handleSubmit, reset } = useForm();\n\n  const [form, reset] = Form.useForm({\n    defaultValues: {\n      Name: '',\n      Size: '',\n      Color: ''\n    }\n  }); // let [description, setDescription] = useState('')\n\n  const onSelect = (value, optionObject) => {\n    setProductId(optionObject.id);\n  };\n\n  const onNameChange = e => {\n    setName(e.target.value);\n  };\n\n  const onSizeChange = e => {\n    setSize(e.target.value);\n  };\n\n  const onColorChange = e => {\n    setColor(e.target.value);\n  };\n\n  const onSubmit = async () => {\n    if (isMounted) {\n      setLoading(true);\n    }\n\n    const payload = {\n      name,\n      size,\n      color,\n      product_id: productId\n    };\n\n    try {\n      let response = {};\n\n      if (variantId) {\n        response = await updateVariant(productId, payload);\n      } else {\n        response = await postVariant(payload);\n      }\n\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n\n    if (isMounted) {\n      setLoading(false);\n    }\n  };\n\n  const fetchProducts = async () => {\n    try {\n      let response = await getProduct(1, 100);\n      let result = [];\n\n      if (response.status === 200) {\n        result = response.data.data.products.map(product => ({\n          id: product.id,\n          value: product.name\n        }));\n\n        if (isMounted) {\n          setAutoCompleteOption(result);\n        }\n      } else {\n        console.error(\"fail to fetch products\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchProductbyID = async productId => {\n    try {\n      let response = await getProductById(productId);\n      let productData = response.data.data.product;\n      setProduct(productData.name);\n      form.setFieldsValue({\n        Product: productData.name\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchVariant = async variantId => {\n    try {\n      let response = await getVariantById(variantId);\n      fetchProductbyID(response.data.data.variant.product_id);\n      let variantData = response.data.data.variant;\n\n      if (variantId && isMounted) {\n        setName(variantData.name);\n        setSize(variantData.size);\n        setProductId(variantData.product_id);\n        setColor(variantData.color);\n        form.setFieldsValue({\n          Name: variantData.name,\n          Size: variantData.size,\n          Color: variantData.color\n        });\n      } else {}\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchProducts();\n\n    if (variantId) {\n      fetchVariant(variantId);\n    }\n\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, \"Variant Form\"), /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n    form: form,\n    name: \"nest-messages\",\n    validateMessages: validateMessages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Product\",\n    label: \"Product\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    style: {\n      width: 200\n    },\n    options: autoCompleteOption,\n    onSelect: onSelect,\n    placeholder: \"Insert product name\",\n    filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Name\",\n    label: \"Name\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: name,\n    onChange: onNameChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Size\",\n    label: \"Size\",\n    rules: [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: size,\n    onChange: onSizeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"Color\",\n    label: \"Color\",\n    rules: [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: color,\n    onChange: onColorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    wrapperCol: { ...layout.wrapperCol,\n      offset: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    loading: loading,\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default VariantForm;","map":{"version":3,"sources":["/home/herman3g/learn/sourcesage/full-stack-developer-challenge/frontend/src/pages/Variant/Form.jsx"],"names":["React","useState","useEffect","Form","Input","Button","AutoComplete","getProduct","getProductById","postVariant","getVariantById","updateVariant","successModal","errorModal","layout","labelCol","span","wrapperCol","formItemLayout","xs","sm","validateMessages","required","VariantForm","props","isMounted","variantId","match","params","autoCompleteOption","setAutoCompleteOption","productId","setProductId","product","setProduct","name","setName","size","setSize","color","setColor","loading","setLoading","form","reset","useForm","defaultValues","Name","Size","Color","onSelect","value","optionObject","id","onNameChange","e","target","onSizeChange","onColorChange","onSubmit","payload","product_id","response","status","error","console","fetchProducts","result","data","products","map","log","fetchProductbyID","productData","setFieldsValue","Product","fetchVariant","variant","variantData","cleanup","width","inputValue","option","toUpperCase","indexOf","offset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Form, Input, Button } from \"antd\";\nimport { AutoComplete } from \"antd\";\nimport { \n  getProduct, \n  getProductById \n} from \"../../API-services/product\";\nimport {\n  postVariant,\n  getVariantById,\n  updateVariant,\n} from \"../../API-services/variant\";\nimport { successModal, errorModal } from \"../../utilities/modal\";\n\nconst layout = {\n  labelCol: {\n    span: 2,\n  },\n  wrapperCol: {\n    span: 8,\n  },\n};\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\n\nconst validateMessages = {\n  required: \"${label} is required!\",\n};\n\nconst VariantForm = (props) => {\n  let isMounted = true;\n  let variantId = props.match.params.variantId;\n  let [autoCompleteOption, setAutoCompleteOption] = useState([]);\n  let [productId, setProductId] = useState(\"\");\n  let [product, setProduct] = useState(\"\");\n  let [name, setName] = useState(\"\");\n  let [size, setSize] = useState(\"\");\n  let [color, setColor] = useState(\"\");\n  let [loading, setLoading] = useState(false);\n  // const { register, handleSubmit, reset } = useForm();\n\n  const [form, reset] = Form.useForm({\n    defaultValues: {\n      Name: '',\n      Size: '',\n      Color: '',\n    },\n  });\n  // let [description, setDescription] = useState('')\n\n  const onSelect = (value, optionObject) => {\n    setProductId(optionObject.id);\n  };\n\n  const onNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const onSizeChange = (e) => {\n    setSize(e.target.value);\n  };\n\n  const onColorChange = (e) => {\n    setColor(e.target.value);\n  };\n\n  const onSubmit = async () => {\n    if (isMounted) {\n      setLoading(true);\n    }\n\n    const payload = {\n      name,\n      size,\n      color,\n      product_id: productId,\n    };\n    try {\n      let response = {};\n\n      if (variantId) {\n        response = await updateVariant(productId, payload);\n      } else {\n        response = await postVariant(payload);\n      }\n      if (response.status === 200) {\n        successModal();\n      } else {\n        errorModal();\n      }\n    } catch (error) {\n      errorModal();\n      console.error(error);\n    }\n    if (isMounted) {\n      setLoading(false);\n    }\n    \n  };\n\n  const fetchProducts = async () => {\n    try {\n      let response = await getProduct(1, 100);\n      let result = [];\n      if (response.status === 200) {\n        result = response.data.data.products.map((product) => ({\n          id: product.id,\n          value: product.name,\n        }));\n        if (isMounted) {\n          setAutoCompleteOption(result);\n        }\n\n      } else {\n        console.error(\"fail to fetch products\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchProductbyID = async (productId) => {\n    try {\n      let response = await getProductById(productId);\n      let productData = response.data.data.product;\n      setProduct(productData.name);\n      form.setFieldsValue({\n        Product: productData.name\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchVariant = async (variantId) => {\n    try {\n      let response = await getVariantById(variantId);\n      fetchProductbyID(response.data.data.variant.product_id)\n\n      let variantData = response.data.data.variant;\n      if (variantId && isMounted) {\n        setName(variantData.name);\n        setSize(variantData.size);\n        setProductId(variantData.product_id);\n        setColor(variantData.color);\n\n        form.setFieldsValue({\n          Name: variantData.name,\n          Size: variantData.size,\n          Color: variantData.color,\n        });\n      } else {\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchProducts();\n    if (variantId) {\n      fetchVariant(variantId);\n    }\n\n    return function cleanup() {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <>\n      <h1>Variant Form</h1>\n\n      <Form\n        {...formItemLayout}\n        form={form}\n        name=\"nest-messages\"\n        validateMessages={validateMessages}\n      >\n        <Form.Item\n          name=\"Product\"\n          label=\"Product\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AutoComplete\n            style={{\n              width: 200,\n            }}\n            options={autoCompleteOption}\n            onSelect={onSelect}\n            placeholder=\"Insert product name\"\n            filterOption={(inputValue, option) =>\n              option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !==\n              -1\n            }\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"Name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input value={name} onChange={onNameChange} />\n        </Form.Item>\n        <Form.Item\n          name=\"Size\"\n          label=\"Size\"\n          rules={[]}\n        >\n          <Input value={size} onChange={onSizeChange} />\n        </Form.Item>\n        <Form.Item\n          name=\"Color\"\n          label=\"Color\"\n          rules={[\n            ]}\n        >\n          <Input value={color} onChange={onColorChange} />\n        </Form.Item>\n       \n        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n          <Button type=\"primary\" loading={loading} onClick={onSubmit}>\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default VariantForm;\n"]},"metadata":{},"sourceType":"module"}